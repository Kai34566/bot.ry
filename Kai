import telebot
from telebot import types
from random import shuffle
import asyncio
import logging
import time

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot("7191998889:AAHk1HXznlL0-xI7DDanbPdiYvQLI8zb_Qs")

# –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —á–∞—Ç–∞–º–∏ –∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —ç—Ç–∏—Ö —á–∞—Ç–∞—Ö
chat_list = {}


is_night = False

class Game:
    def __init__(self):
        self.players = {}
        self.dead = None
        self.sheriff_check = None
        self.doc_target = None  # –ù–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–æ–∫—Ç–æ—Ä–∞
        self.vote_counts = {}
        self.game_running = False
        self.button_id = None
        self.dList_id = None
        self.shList_id = None
        self.docList_id = None  # –ù–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞
        
    def update_player_list(self):
        players_list = ", ".join([player['name'] for player in self.players.values()])
        return players_list

    def remove_player(self, player_id):
        if player_id in self.players:
            del self.players[player_id]
        self.update_player_list()

    def update_player_list(self):
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        players_list = ", ".join([player['name'] for player in self.players.values()])
        return players_list

def change_role(player_id, player_dict, new_role, text):
    player_dict[player_id].update({'role': new_role, 'skipped_actions': 0})
    bot.send_message(player_id, text)

def list_btn(player_dict, chat_id, player_role, text):
    players_btn = types.InlineKeyboardMarkup()
    for key, val in player_dict.items():
        if val['role'] != player_role and val['role'] != 'dead':
            players_btn.add(types.InlineKeyboardButton(val['name'], callback_data=f'{key}_{player_role[0]}'))
    message_id = bot.send_message(chat_id, text, reply_markup=players_btn).message_id
    return message_id

def registration_message(players):
    if players:
        player_names = [player['name'] for player in players.values()]
        player_list = ', '.join(player_names)
        return f"–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:\n{player_list}\n\n–ò—Ç–æ–≥–æ: {len(player_names)} —á–µ–ª."
    else:
        return "*–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ –∏–≥—Ä—É*"

def night_message(players):
    living_players = [f"{i + 1}. {player['name']}" for i, player in enumerate(players.values()) if player['role'] != 'dead']
    player_list = '\n'.join(living_players)
    return f"*–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:*\n{player_list}\n\n—Å–ø–∞—Ç—å –æ—Å—Ç–∞–ª–æ—Å—å 45 —Å–µ–∫.\n"

def day_message(players):
    living_players = [f"{i + 1}. {player['name']}" for i, player in enumerate(players.values()) if player['role'] != 'dead']
    player_list = '\n'.join(living_players)
    roles = [player['role'] for player in players.values() if player['role'] != 'dead']
    role_counts = {role: roles.count(role) for role in set(roles)}
    roles_text = ', '.join([f"{role}: {count}" for role, count in role_counts.items()])
    return f"*–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:*\n{player_list}\n\n–ö—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö:\n{roles_text}\n–í—Å–µ–≥–æ: {len(living_players)} —á–µ–ª.\n\n–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—á–∏, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö‚Ä¶"

def players_alive(player_dict, phase):
    if phase == "registration":
        return registration_message(player_dict)
    elif phase == "night":
        return night_message(player_dict)
    elif phase == "day":
        return day_message(player_dict)

def emoji(role):
    emojis = {
        '–º–∞—Ñ–∏—è': 'ü§µüèª',
        '—à–µ—Ä–∏—Ñ': 'üïµüèºÔ∏è‚Äç‚ôÇÔ∏è',
        '–º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å': 'üë®üèº',
        '–¥–æ–∫—Ç–æ—Ä': 'üë®‚Äç‚öïÔ∏è'
    }
    return emojis.get(role, '')

def voice_handler(chat_id):
    global chat_list
    chat = chat_list[chat_id]
    players = chat.players
    votes = []
    for player_id, player in players.items():
        if 'voice' in player:
            votes.append(player['voice'])
            del player['voice']
    if votes:
        dead_id = max(set(votes), key=votes.count)
        dead = players.pop(dead_id)
        return dead

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start
    if len(text.split()) > 1:
        param = text.split()[1]
        if param.startswith("join_"):
            game_chat_id = int(param.split('_')[1])
            chat = chat_list.get(game_chat_id)
            if chat and user_id not in chat.players:
                user_name = message.from_user.first_name
                chat.players[user_id] = {'name': user_name, 'role': '–∂–¥–µ—Ç', 'skipped_actions': 0}
                bot.send_message(user_id, f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –≤ —á–∞—Ç–µ ¬´{bot.get_chat(game_chat_id).title}¬ª")
                bot.edit_message_text(chat_id=game_chat_id, message_id=chat.button_id, text=players_alive(chat.players, "registration"), reply_markup=types.InlineKeyboardMarkup([[types.InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', url=f'https://t.me/{bot.get_me().username}?start=join_{game_chat_id}')]]))
            else:
                bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ "üé≤ –í–æ–π—Ç–∏ –≤ —á–∞—Ç", "üì∞ –ù–æ–≤–æ—Å—Ç–∏" –∏ "ü§µüèª –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç"
    keyboard = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ "üé≤ –í–æ–π—Ç–∏ –≤ —á–∞—Ç"
    join_chat_btn = types.InlineKeyboardButton('üé≤ –í–æ–π—Ç–∏ –≤ —á–∞—Ç', callback_data='join_chat')
    keyboard.add(join_chat_btn)
    
    # –ö–Ω–æ–ø–∫–∞ "üì∞ –ù–æ–≤–æ—Å—Ç–∏"
    news_btn = types.InlineKeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏', url='https://t.me/IDMafiaNews')
    keyboard.add(news_btn)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    bot_username = bot.get_me().username
    add_to_group_url = f'https://t.me/{bot_username}?startgroup=bot_command'
    
    # –ö–Ω–æ–ø–∫–∞ "ü§µüèª –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç" (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É)
    add_to_group_btn = types.InlineKeyboardButton('ü§µüèª –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ —Å–≤–æ–π —á–∞—Ç', url=add_to_group_url)
    keyboard.add(add_to_group_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç!\n–Ø –≤–µ–¥—É—â–∏–π –±–æ—Ç –ø–æ –∏–≥—Ä–µ –º–∞—Ñ–∏—èü§µüèª. –ù–∞—á–Ω–µ–º –∏–≥—Ä–∞—Ç—å?', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'join_chat')
def join_chat_callback(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üé≤ –í–æ–π—Ç–∏ –≤ —á–∞—Ç"
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üõ†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π"
    test_button = types.InlineKeyboardMarkup()
    test_btn = types.InlineKeyboardButton('üõ†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π', url='https://t.me/+ZAgUMKzgjKRkNTli')
    test_button.add(test_btn)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "üõ†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π"
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è:', reply_markup=test_button)

@bot.message_handler(commands=['game'])
def create_game(message):
    chat_id = message.chat.id
    if chat_id not in chat_list:
        chat_list[chat_id] = Game()

    chat = chat_list[chat_id]
    if chat.game_running:
        bot.send_message(chat_id, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.')
        return

    join_btn = types.InlineKeyboardMarkup()
    bot_username = bot.get_me().username
    join_url = f'https://t.me/{bot_username}?start=join_{chat_id}'
    item1 = types.InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', url=join_url)
    join_btn.add(item1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    msg_text = registration_message(chat.players)
    msg = bot.send_message(chat_id, msg_text, reply_markup=join_btn, parse_mode="Markdown")
    chat.button_id = msg.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /game
    bot.delete_message(chat_id, message.message_id)

@bot.message_handler(commands=['start_game'])
def start_game(message):
    chat_id = message.chat.id
    if chat_id not in chat_list:
        bot.send_message(chat_id, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /game.')
        return

    chat = chat_list[chat_id]
    if chat.game_running:
        bot.send_message(chat_id, '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.')
        return

    if len(chat.players) < 4:
        bot.send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–º–∏–Ω–∏–º—É–º 4).')
        return

    chat.game_running = True
    bot.send_message(chat_id, '*–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!*', parse_mode="Markdown")

    players_list = list(chat.players.items())
    shuffle(players_list)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if chat.button_id:
        bot.delete_message(chat_id, chat.button_id)

    # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - –º–∞—Ñ–∏—è
    change_role(players_list[0][0], chat.players, 'ü§µüèª –ú–∞—Ñ–∏—è', '–¢—ã - ü§µüèª–º–∞—Ñ–∏—è! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —É–±—Ä–∞—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.')

    # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ - —à–µ—Ä–∏—Ñ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ >= 6
    if len(players_list) >= 6:
        change_role(players_list[1][0], chat.players, 'üïµÔ∏è‚Äç‚ôÇÔ∏è –®–µ—Ä–∏—Ñ', '–¢—ã - üïµüèºÔ∏è‚Äç‚ôÇÔ∏è—à–µ—Ä–∏—Ñ! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ñ–∏—é –∏ —Å–ø–∞—Å—Ç–∏ –≥–æ—Ä–æ–¥.')
        start_index = 2
    else:
        start_index = 1

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ - –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –¥–æ–∫—Ç–æ—Ä, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ >= 4
    doctor_assigned = False
    for i in range(start_index, len(players_list)):
        if len(players_list) >= 4 and not doctor_assigned:
            change_role(players_list[i][0], chat.players, 'üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä', '–¢—ã - üë®‚Äç‚öïÔ∏è–¥–æ–∫—Ç–æ—Ä! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–ø–∞—Å–∞—Ç—å –∂–∏—Ç–µ–ª–µ–π –æ—Ç —Ä—É–∫ –º–∞—Ñ–∏–∏.')
            doctor_assigned = True
        else:
            change_role(players_list[i][0], chat.players, 'üë±‚Äç‚ôÇÔ∏è –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', '–¢—ã - üë®üèº–º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é –∏ –∑–∞—â–∏—Ç–∏—Ç—å –≥–æ—Ä–æ–¥.')

    asyncio.run(game_cycle(chat_id))

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start_game
    bot.delete_message(chat_id, message.message_id)

@bot.message_handler(commands=['leave'])
def leave_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chat = chat_list.get(chat_id)

    if not chat:
        bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if user_id not in chat.players:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    role = chat.players[user_id]['role']
    name = chat.players[user_id]['name']
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    del chat.players[user_id]
    chat.update_player_list()
    
    if chat.game_running:
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.")
        bot.send_message(chat_id, f"{name} –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≥–Ω–µ—Ç—É—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–≤–µ—Å–∏–ª—Å—è. –û–Ω –±—ã–ª {emoji(role)} {role}")
    else:
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        bot.edit_message_text(chat_id=chat_id, message_id=chat.button_id, text=players_alive(chat.players, "registration"), reply_markup=types.InlineKeyboardMarkup([[types.InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ', url=f'https://t.me/{bot.get_me().username}?start=join_{chat_id}')]]))

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—â–µ–≥–æ —á–∞—Ç–∞
    bot.delete_message(chat_id, message.message_id)

bot_username = "@nrlv_bot"

async def game_cycle(chat_id):
    global chat_list, is_night
    chat = chat_list[chat_id]
    game_start_time = time.time()

    while chat.game_running:
        await asyncio.sleep(5)

        is_night = True
        players_alive_text = players_alive(chat.players, "night")
        keyboard_night = types.InlineKeyboardMarkup()

        bot.send_animation(chat_id, 'https://t.me/Hjoxbednxi/4', caption='üåÉ –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å\n–ù–∞ —É–ª–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –ª–∏—à—å —Å–∞–º—ã–µ –æ—Ç–≤–∞–∂–Ω—ã–µ –∏ –±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ.\n–£—Ç—Ä–æ–º –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ö –≥–æ–ª–æ–≤—ã...', parse_mode="Markdown", reply_markup=keyboard_night)
        msg = bot.send_message(chat_id=chat_id, text=players_alive_text, parse_mode="Markdown")
        chat.button_id = msg.message_id

        chat.dead = None
        chat.sheriff_check = None
        chat.doc_target = None

        for player_id, player in chat.players.items():
            if player['role'] == 'ü§µüèª –ú–∞—Ñ–∏—è':
                chat.dList_id = list_btn(chat.players, chat_id, '–º–∞—Ñ–∏—è', '–ö–æ–≥–æ –±—É–¥–µ–º —É—Å—Ç—Ä–∞–Ω—è—Ç—å?')
            elif player['role'] == 'üïµÔ∏è‚Äç‚ôÇÔ∏è –®–µ—Ä–∏—Ñ':
                chat.shList_id = list_btn(chat.players, chat_id, '—à–µ—Ä–∏—Ñ', '–ö–æ–≥–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?')
            elif player['role'] == 'üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä':
                chat.docList_id = list_btn(chat.players, chat_id, '–¥–æ–∫—Ç–æ—Ä', '–ö–æ–≥–æ –±—É–¥–µ–º –ª–µ—á–∏—Ç—å?')

        await asyncio.sleep(30)

        is_night = False

        to_remove = []
        for player_id, player in chat.players.items():
            if player['role'] != 'üë±‚Äç‚ôÇÔ∏è –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å' and not player.get('action_taken', False):
                player['skipped_actions'] += 1
                if player['skipped_actions'] >= 2:
                    to_remove.append(player_id)
            else:
                player['action_taken'] = False

        bot.send_animation(chat_id, 'https://t.me/Hjoxbednxi/5', caption='üèô –î–µ–Ω—å\n–°–æ–ª–Ω—Ü–µ –≤—Å—Ö–æ–¥–∏—Ç,\n–ø–æ–¥—Å—É—à–∏–≤–∞—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–∞—Ö –ø—Ä–æ–ª–∏—Ç—É—é –Ω–æ—á—å—é –∫—Ä–æ–≤—å...', parse_mode="Markdown")

        if chat.dead:
            dead_id, dead = chat.dead
            if chat.doc_target and chat.doc_target == dead_id:
                bot.send_message(chat_id, f'üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –∫–æ–≥–æ-—Ç–æ —Å–ø–∞—Å', parse_mode="Markdown")
            else:
                bot.send_message(chat_id, f'–°–µ–≥–æ–¥–Ω—è –∂–µ—Å—Ç–æ–∫–æ —É–±–∏—Ç {dead["name"]}...\n–ì–æ–≤–æ—Ä—è—Ç, —É –Ω–µ–≥–æ –≤ –≥–æ—Å—Ç—è—Ö –±—ã–ª ü§µüèª –ú–∞—Ñ–∏—è', parse_mode="Markdown")
                chat.remove_player(dead_id)
                players_list_text = chat.update_player_list()

        players_alive_text = players_alive(chat.players, "day")
        msg = bot.send_message(chat_id=chat_id, text=players_alive_text, parse_mode="Markdown")
        chat.button_id = msg.message_id

        chat.dead = None
        chat.sheriff_check = None

        await asyncio.sleep(10)

        keyboard_vote = types.InlineKeyboardMarkup()
        vote_buttons = []
        for player_id, player in chat.players.items():
            vote_buttons.append(types.InlineKeyboardButton(player['name'], callback_data=f"{player_id}_v"))
        keyboard_vote.add(*vote_buttons)

        bot.send_message(chat_id, '*–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ –Ω–∞–∫–∞–∑–∞—Ç—å –≤–∏–Ω–æ–≤–∞—Ç—ã—Ö.*\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è 45 —Å–µ–∫—É–Ω–¥\n', parse_mode="Markdown", reply_markup=keyboard_vote)

        await asyncio.sleep(45)

        max_votes = 0
        to_kill = None
        for player_id, votes in chat.vote_counts.items():
            if votes > max_votes:
                max_votes = votes
                to_kill = player_id

        if to_kill is not None:
            dead = chat.players[to_kill]
            bot.send_message(chat_id, f'üåÖ {dead["name"]} —ç—Ç–∏–º –≤–µ—á–µ—Ä–æ–º –ø–æ–∫–∏–¥–∞–µ—Ç\n–≥–æ—Ä–æ–¥ | –ï–≥–æ —Ä–æ–ª—å {dead["role"]}', parse_mode="Markdown")
            chat.remove_player(to_kill)
            players_list_text = chat.update_player_list()
        else:
            bot.send_message(chat_id, '–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–π—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é.')

        chat.vote_counts.clear()
        for player in chat.players.values():
            player['has_voted'] = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        mafia_count = len([p for p in chat.players.values() if p['role'] == 'ü§µüèª –ú–∞—Ñ–∏—è'])
        non_mafia_count = len(chat.players) - mafia_count

        if mafia_count == 0 or mafia_count >= non_mafia_count:
            winners = [f"{v['name']} - {v['role']}" for k, v in chat.players.items() if v['role'] == 'ü§µüèª –ú–∞—Ñ–∏—è']
            losers = [f"{v['name']} - {v['role']}" for k, v in chat.players.items() if v['role'] != 'ü§µüèª –ú–∞—Ñ–∏—è']

            game_duration = time.time() - game_start_time
            minutes = int(game_duration // 60)
            seconds = int(game_duration % 60)

            result_text = f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ü–æ–±–µ–¥–∏–ª–∞ –ú–∞—Ñ–∏—è\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{', '.join(winners)}\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n{', '.join(losers)}\n\n–ò–≥—Ä–∞ –¥–ª–∏–ª–∞—Å—å: {minutes} –º–∏–Ω. {seconds} —Å–µ–∫."

            bot.send_message(chat_id, result_text)

            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ —Å–Ω–æ–≤–∞
            chat_list[chat_id] = Game()
            break

@bot.callback_query_handler(func=lambda call: call.data.startswith('join_'))
def join_game(call):
    chat_id = int(call.data.split('_')[1])
    chat = chat_list[chat_id]
    user_id = call.from_user.id
    user_name = call.from_user.first_name

    if user_id not in chat.players:
        chat.players[user_id] = {'name': user_name, 'role': '–∂–¥–µ—Ç', 'skipped_actions': 0}
        bot.answer_callback_query(call.id, text="–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
        new_msg_text = registration_message(chat.players)
        bot.edit_message_text(chat_id=chat_id, message_id=chat.button_id, text=new_msg_text, reply_markup=call.message.reply_markup, parse_mode="Markdown")
    else:
        bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global chat_list
    chat_id = call.message.chat.id

    if chat_id not in chat_list:
        chat_list[chat_id] = Game()

    try:
        data_parts = call.data.split('_')
        target_id = int(data_parts[0])
        action = data_parts[1]

        chat = chat_list[chat_id]
        from_id = call.from_user.id  # ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ

        if from_id in chat.players:
            player_role = chat.players[from_id]['role']

            if player_role == 'ü§µüèª –ú–∞—Ñ–∏—è' and action == '–º':  # –ú–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É
                chat.dead = (target_id, chat.players[target_id])
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="ü§µüèª –ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ –∂–µ—Ä—Ç–≤—É...")
                bot.send_message(from_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–±–∏—Ç—å {chat.players[target_id]['name']}")

            elif player_role == 'üïµÔ∏è‚Äç‚ôÇÔ∏è –®–µ—Ä–∏—Ñ' and action == '—à':  # –®–µ—Ä–∏—Ñ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–∞
                chat.sheriff_check = target_id
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üïµÔ∏è‚Äç‚ôÇÔ∏è –®–µ—Ä–∏—Ñ —É—à–µ–ª –∏—Å–∫–∞—Ç—å –∑–ª–æ–¥–µ–µ–≤...")
                bot.send_message(from_id, f"–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ {chat.players[target_id]['name']}, –æ–Ω - {chat.players[target_id]['role']}")

            elif player_role == 'üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä' and action == '–¥':  # –î–æ–∫—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –ª–µ—á–µ–Ω–∏—è
                chat.doc_target = target_id
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å –¥–ª—è –ª–µ—á–µ–Ω–∏—è...")
                bot.send_message(from_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–µ—á–∏—Ç—å {chat.players[target_id]['name']}")

            elif action == 'v':  # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                if 'vote_counts' not in chat.__dict__:
                    chat.vote_counts = {}  # –°–æ–∑–¥–∞–µ–º vote_counts, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

                if not chat.players[from_id].get('has_voted', False):
                    chat.vote_counts[target_id] = chat.vote_counts.get(target_id, 0) + 1
                    chat.players[from_id]['has_voted'] = True
                    bot.send_message(chat_id, f"{chat.players[from_id]['name']} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞) –∑–∞ {chat.players[target_id]['name']}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global is_night
    chat_id = message.chat.id
    if is_night:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–æ—á—å
        bot.delete_message(chat_id, message.message_id)
    else:  # –ï—Å–ª–∏ –¥–µ–Ω—å, —Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º
        user_id = message.from_user.id
        chat = chat_list.get(chat_id)
        if chat:
            if user_id in chat.players and chat.players[user_id]['role'] != 'dead':
                return  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ—Ä—Ç–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        bot.delete_message(chat_id, message.message_id)

bot.infinity_polling()
